"""
Utilidades comunes para el sistema de an√°lisis de coples
"""

import os
import time
import json
import cv2
import numpy as np
from typing import Dict, Any, Optional, Tuple
from datetime import datetime

# Importar configuraci√≥n
from analisis_config import FileConfig, GlobalConfig


def verificar_dependencias() -> bool:
    """
    Verifica que todas las dependencias necesarias est√©n disponibles.
    
    Returns:
        bool: True si todas las dependencias est√°n disponibles
    """
    dependencias_ok = True
    
    # Verificar OpenCV
    try:
        cv2_version = cv2.__version__
        print(f"‚úÖ OpenCV {cv2_version} disponible")
    except ImportError:
        print("‚ùå OpenCV no disponible")
        dependencias_ok = False
    
    # Verificar NumPy
    try:
        np_version = np.__version__
        print(f"‚úÖ NumPy {np_version} disponible")
    except ImportError:
        print("‚ùå NumPy no disponible")
        dependencias_ok = False
    
    # Verificar ONNX Runtime
    try:
        import onnxruntime as ort
        ort_version = ort.__version__
        print(f"‚úÖ ONNX Runtime {ort_version} disponible")
    except ImportError:
        print("‚ö†Ô∏è ONNX Runtime no disponible (se instalar√° autom√°ticamente)")
    
    return dependencias_ok


def mostrar_info_sistema():
    """Muestra informaci√≥n del sistema y dependencias."""
    print("üöÄ SISTEMA DE AN√ÅLISIS DE COPLES")
    print("=" * 50)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üêç Python: {os.sys.version.split()[0]}")
    print(f"üìÅ Directorio de trabajo: {os.getcwd()}")
    print("=" * 50)


def generar_nombre_archivo(timestamp: str, count: int, extension: str = None) -> str:
    """
    Genera un nombre de archivo √∫nico.
    
    Args:
        timestamp (str): Timestamp en formato espec√≠fico
        count (int): Contador de archivo
        extension (str, optional): Extensi√≥n del archivo
        
    Returns:
        str: Nombre del archivo generado
    """
    if extension is None:
        extension = FileConfig.IMAGE_FORMAT
    
    # Remover extensi√≥n si ya est√° incluida
    if extension.startswith('.'):
        extension = extension[1:]
    
    filename = FileConfig.FILENAME_TEMPLATE.format(
        timestamp=timestamp,
        count=count,
        ext=f".{extension}"
    )
    
    return filename


def guardar_imagen_clasificacion(
    imagen: np.ndarray, 
    clase_predicha: str, 
    confianza: float,
    tiempo_captura: float,
    tiempo_inferencia: float,
    count: int
) -> Tuple[Optional[str], Optional[str]]:
    """
    Guarda la imagen clasificada y genera el archivo JSON correspondiente.
    
    Args:
        imagen (np.ndarray): Imagen a guardar
        clase_predicha (str): Clase predicha
        confianza (float): Nivel de confianza
        tiempo_captura (float): Tiempo de captura en ms
        tiempo_inferencia (float): Tiempo de inferencia en ms
        count (int): Contador de archivo
        
    Returns:
        tuple: (ruta_imagen, ruta_json) o (None, None) si hay error
    """
    try:
        # Asegurar que el directorio de salida existe
        GlobalConfig.ensure_output_dir()
        
        # Generar timestamp
        timestamp = time.strftime(FileConfig.TIMESTAMP_FORMAT)
        
        # Generar nombres de archivo
        nombre_imagen = generar_nombre_archivo(timestamp, count, FileConfig.IMAGE_FORMAT)
        nombre_json = generar_nombre_archivo(timestamp, count, FileConfig.JSON_FORMAT)
        
        # Rutas completas
        ruta_imagen = os.path.join(FileConfig.OUTPUT_DIR, nombre_imagen)
        ruta_json = os.path.join(FileConfig.OUTPUT_DIR, nombre_json)
        
        # Guardar imagen
        cv2.imwrite(ruta_imagen, imagen)
        print(f"üìÅ Imagen guardada: {ruta_imagen}")
        
        # Crear datos JSON
        datos_json = {
            'archivo_imagen': nombre_imagen,
            'clase_predicha': clase_predicha,
            'confianza': confianza,
            'tiempo_captura_ms': tiempo_captura,
            'tiempo_inferencia_ms': tiempo_inferencia,
            'tiempo_total_ms': tiempo_captura + tiempo_inferencia,
            'timestamp': datetime.now().isoformat(),
            'modelo': 'CopleClasDef2C1V.onnx',
            'resolucion': {
                'ancho': imagen.shape[1],
                'alto': imagen.shape[0],
                'canales': imagen.shape[2] if len(imagen.shape) > 2 else 1
            }
        }
        
        # Guardar JSON
        with open(ruta_json, 'w', encoding='utf-8') as f:
            json.dump(datos_json, f, indent=2, ensure_ascii=False)
        
        print(f"üìÅ JSON guardado: {ruta_json}")
        
        return ruta_imagen, ruta_json
        
    except Exception as e:
        print(f"‚ùå Error guardando archivos: {e}")
        return None, None


def calcular_estadisticas_tiempo(tiempos: list) -> Dict[str, float]:
    """
    Calcula estad√≠sticas de una lista de tiempos.
    
    Args:
        tiempos (list): Lista de tiempos en milisegundos
        
    Returns:
        dict: Estad√≠sticas calculadas
    """
    if not tiempos:
        return {
            'promedio': 0.0,
            'std': 0.0,
            'min': 0.0,
            'max': 0.0,
            'total': 0.0
        }
    
    tiempos_array = np.array(tiempos)
    
    return {
        'promedio': float(np.mean(tiempos_array)),
        'std': float(np.std(tiempos_array)),
        'min': float(np.min(tiempos_array)),
        'max': float(np.max(tiempos_array)),
        'total': float(np.sum(tiempos_array))
    }


def formatear_tiempo(tiempo_ms: float) -> str:
    """
    Formatea un tiempo en milisegundos a formato legible.
    
    Args:
        tiempo_ms (float): Tiempo en milisegundos
        
    Returns:
        str: Tiempo formateado
    """
    if tiempo_ms < 1.0:
        return f"{tiempo_ms:.3f} ms"
    elif tiempo_ms < 1000.0:
        return f"{tiempo_ms:.1f} ms"
    else:
        return f"{tiempo_ms/1000:.2f} s"


def limpiar_memoria():
    """Limpia la memoria del sistema."""
    try:
        import gc
        gc.collect()
        
        # Limpiar memoria de OpenCV si es posible
        try:
            cv2.destroyAllWindows()
            cv2.waitKey(1)
        except:
            pass
        
        print("üßπ Memoria limpiada")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error limpiando memoria: {e}")


def verificar_archivo_modelo(ruta_modelo: str) -> bool:
    """
    Verifica que un archivo de modelo existe y es v√°lido.
    
    Args:
        ruta_modelo (str): Ruta al archivo del modelo
        
    Returns:
        bool: True si el archivo es v√°lido
    """
    try:
        # Verificar que el archivo existe
        if not os.path.exists(ruta_modelo):
            print(f"‚ùå Modelo no encontrado: {ruta_modelo}")
            return False
        
        # Verificar que es un archivo
        if not os.path.isfile(ruta_modelo):
            print(f"‚ùå No es un archivo v√°lido: {ruta_modelo}")
            return False
        
        # Verificar extensi√≥n
        if not ruta_modelo.lower().endswith('.onnx'):
            print(f"‚ùå Extensi√≥n no v√°lida (debe ser .onnx): {ruta_modelo}")
            return False
        
        # Verificar tama√±o del archivo
        tamano = os.path.getsize(ruta_modelo)
        if tamano < 1024:  # Menos de 1KB
            print(f"‚ùå Archivo demasiado peque√±o: {tamano} bytes")
            return False
        
        print(f"‚úÖ Modelo v√°lido: {ruta_modelo} ({tamano/1024/1024:.1f} MB)")
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando modelo: {e}")
        return False


def crear_directorio_salida() -> bool:
    """
    Crea el directorio de salida si no existe.
    
    Returns:
        bool: True si el directorio se cre√≥ o ya exist√≠a
    """
    try:
        if not os.path.exists(FileConfig.OUTPUT_DIR):
            os.makedirs(FileConfig.OUTPUT_DIR)
            print(f"üìÅ Directorio de salida creado: {FileConfig.OUTPUT_DIR}")
        else:
            print(f"üìÅ Directorio de salida ya existe: {FileConfig.OUTPUT_DIR}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error creando directorio de salida: {e}")
        return False


def obtener_info_imagen(imagen: np.ndarray) -> Dict[str, Any]:
    """
    Obtiene informaci√≥n b√°sica de una imagen.
    
    Args:
        imagen (np.ndarray): Imagen a analizar
        
    Returns:
        dict: Informaci√≥n de la imagen
    """
    try:
        info = {
            'forma': imagen.shape,
            'tipo_dato': str(imagen.dtype),
            'dimensiones': len(imagen.shape),
            'tamano_bytes': imagen.nbytes
        }
        
        if len(imagen.shape) >= 2:
            info.update({
                'ancho': imagen.shape[1],
                'alto': imagen.shape[0]
            })
        
        if len(imagen.shape) == 3:
            info['canales'] = imagen.shape[2]
        
        return info
        
    except Exception as e:
        print(f"‚ùå Error obteniendo info de imagen: {e}")
        return {}


def log_performance(operacion: str, tiempo_ms: float, detalles: str = ""):
    """
    Registra informaci√≥n de rendimiento.
    
    Args:
        operacion (str): Nombre de la operaci√≥n
        tiempo_ms (float): Tiempo en milisegundos
        detalles (str): Detalles adicionales
    """
    timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
    
    if detalles:
        print(f"‚è±Ô∏è  [{timestamp}] {operacion}: {tiempo_ms:.2f} ms - {detalles}")
    else:
        print(f"‚è±Ô∏è  [{timestamp}] {operacion}: {tiempo_ms:.2f} ms")


def mostrar_progreso(actual: int, total: int, descripcion: str = "Progreso"):
    """
    Muestra una barra de progreso simple.
    
    Args:
        actual (int): Valor actual
        total (int): Valor total
        descripcion (str): Descripci√≥n del progreso
    """
    if total <= 0:
        return
    
    porcentaje = (actual / total) * 100
    barra_largo = 30
    completado = int((actual / total) * barra_largo)
    
    barra = "‚ñà" * completado + "‚ñë" * (barra_largo - completado)
    
    print(f"\r{descripcion}: |{barra}| {porcentaje:.1f}% ({actual}/{total})", end="")
    
    if actual >= total:
        print()  # Nueva l√≠nea al completar
